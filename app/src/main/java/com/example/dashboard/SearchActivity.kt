package com.example.dashboard

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.speech.RecognizerIntent
import android.util.Log // Import Log
import android.view.MenuItem
import android.view.View
import android.widget.ImageView
import android.widget.LinearLayout // Import LinearLayout
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.SearchView
import androidx.cardview.widget.CardView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.bottomnavigation.BottomNavigationView // Keep import for interface
import com.google.gson.Gson // Import Gson
import com.google.gson.reflect.TypeToken // Import TypeToken
import com.navigine.idl.java.Venue // Import the Venue class
import java.util.Locale
// Remove the Parcelable import as we are using Gson
// import android.os.Parcelable

class SearchActivity : AppCompatActivity(), BottomNavigationView.OnNavigationItemSelectedListener {

    private lateinit var searchView: SearchView
    private lateinit var resultsRecyclerView: RecyclerView
    private lateinit var bottomNavLayout: LinearLayout // Use LinearLayout for custom bottom nav
    private lateinit var startButton: androidx.appcompat.widget.AppCompatButton
    private lateinit var shortcut1: CardView
    private lateinit var shortcut2: CardView
    private lateinit var shortcut3: CardView
    private lateinit var shortcut4: CardView
    private lateinit var micButton: ImageView // Use ImageView as in your XML

    private lateinit var speechRecognitionLauncher: ActivityResultLauncher<Intent>

    private var venueList: List<Venue> = emptyList() // Store the venue list from MainActivity
    private lateinit var searchResultsAdapter: SearchResultsAdapter // Adapter for search results

    companion object {
        private const val TAG = "SearchActivity" // Add a TAG for logging
        private const val recordAudioPermissionRequestCode = 1002
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        supportActionBar?.hide()
        setContentView(R.layout.activity_search)

        // Initialize speech recognition launcher
        speechRecognitionLauncher = registerForActivityResult(
            ActivityResultContracts.StartActivityForResult()
        ) { result ->
            if (result.resultCode == RESULT_OK && result.data != null) {
                val spokenText: ArrayList<String>? = result.data?.getStringArrayListExtra(
                    RecognizerIntent.EXTRA_RESULTS
                )
                spokenText?.get(0)?.let { text ->
                    // Set the spoken text to the search view and trigger a search
                    searchView.setQuery(text, true) // Set query and submit
                }
            }
        }

        // Get the venue list from the Intent using Gson
        val venueListJson = intent.getStringExtra(MainActivity.EXTRA_VENUE_LIST_JSON)

        if (venueListJson != null) {
            try {
                val gson = Gson()
                // Define the type for Gson to deserialize into (List<Venue>)
                // Note: Deserializing abstract classes or interfaces like Navigine's Venue
                // might require custom deserializers if they don't have a default constructor
                // or if they are complex. Assuming Venue has a default constructor
                // and properties that match the JSON structure generated by toJson().
                // If you encounter issues here, you might need to create a data class
                // that mirrors the Venue structure and use that for serialization/deserialization.
                val type = object : TypeToken<ArrayList<Venue>>() {}.type
                // Deserialize the JSON string back into an ArrayList<Venue>
                venueList = gson.fromJson<ArrayList<Venue>>(venueListJson, type) ?: emptyList()
                Log.d(TAG, "Successfully deserialized ${venueList.size} venues from JSON.")
            } catch (e: Exception) {
                Log.e(TAG, "Error deserializing venue list JSON: ${e.message}")
                Toast.makeText(this, "Failed to load venue data.", Toast.LENGTH_SHORT).show()
                venueList = emptyList() // Ensure venueList is empty on error
            }
        } else {
            Log.w(TAG, "No venue list JSON found in Intent.")
            Toast.makeText(this, "Venue list not available.", Toast.LENGTH_SHORT).show()
            venueList = emptyList() // Ensure venueList is empty
        }

        // Initialize views
        searchView = findViewById(R.id.searchView)
        resultsRecyclerView = findViewById(R.id.resultsRecyclerView)
        bottomNavLayout = findViewById(R.id.bottomNavLayout) // Use LinearLayout ID
        startButton = findViewById(R.id.startButton)
        shortcut1 = findViewById(R.id.shortcut1)
        shortcut2 = findViewById(R.id.shortcut2)
        shortcut3 = findViewById(R.id.shortcut3)
        shortcut4 = findViewById(R.id.shortcut4)
        micButton = findViewById(R.id.micButton) // Use ImageView ID

        // Set up RecyclerView
        resultsRecyclerView.layoutManager = LinearLayoutManager(this)
        searchResultsAdapter = SearchResultsAdapter(emptyList()) { venue ->
            // Handle item click (e.g., set search view query or navigate)
            // Use the correct method/property to get the venue name
            searchView.setQuery(getVenueName(venue), true) // Set query and submit
        }
        resultsRecyclerView.adapter = searchResultsAdapter

        // Set up custom Bottom Navigation listeners
        setupBottomNavListeners()


        // Set up search functionality
        setupSearch()

        // Set up button click listeners
        setupClickListeners()

        // Handle initial query if passed from MainActivity
        val initialQuery = intent.getStringExtra("initial_query")
        if (initialQuery != null) {
            searchView.setQuery(initialQuery, true) // Set initial query and submit
        }
    }

    private fun setupSearch() {
        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
            override fun onQueryTextSubmit(query: String?): Boolean {
                // Handle search submission
                query?.let {
                    performSearch(it)
                }
                return true
            }

            override fun onQueryTextChange(newText: String?): Boolean {
                // Handle search text changes (for real-time suggestions)
                newText?.let {
                    provideSuggestions(it)
                }
                return true
            }
        })

        // Request focus and show keyboard when the activity starts
        searchView.requestFocus()
    }


    private fun performSearch(query: String) {
        // Implement your search logic here based on the query and venueList
        Log.d(TAG, "Performing search for: $query")

        val filteredVenues = venueList.filter { venue ->
            // Use the correct method to get the venue name for searching
            getVenueName(venue).contains(query, ignoreCase = true)
            // You can add more sophisticated search logic here (e.g., searching by description, etc.)
        }

        searchResultsAdapter.updateResults(filteredVenues)
    }

    private fun provideSuggestions(query: String) {
        // Implement suggestion logic here based on the query and venueList
        // This will filter the venueList as the user types
        Log.d(TAG, "Providing suggestions for: $query")

        val suggestions = venueList.filter { venue ->
            // Use the correct method to get the venue name for suggestions
            getVenueName(venue).contains(query, ignoreCase = true)
        }

        searchResultsAdapter.updateResults(suggestions)
    }

    private fun setupClickListeners() {
        startButton.setOnClickListener {
            // Handle start button click
            val searchQuery = searchView.query.toString()
            if (searchQuery.isNotEmpty()) {
                Toast.makeText(this, "Starting navigation to: $searchQuery", Toast.LENGTH_SHORT).show()
                // Implement navigation start logic
                // You might want to pass the selected venue or query back to MainActivity
            } else {
                Toast.makeText(this, "Please enter a destination", Toast.LENGTH_SHORT).show()
            }
        }

        // Set up shortcut button click listeners
        shortcut1.setOnClickListener {
            // Handle shortcut 1 click
            handleShortcutClick(1)
        }

        shortcut2.setOnClickListener {
            // Handle shortcut 2 click
            handleShortcutClick(2)
        }

        shortcut3.setOnClickListener {
            // Handle shortcut 3 click
            handleShortcutClick(3)
        }

        shortcut4.setOnClickListener {
            // Handle shortcut 4 click
            handleShortcutClick(4)
        }

        // Set up mic button click listener
        micButton.setOnClickListener {
            // Check for audio recording permission
            if (ContextCompat.checkSelfPermission(
                    this,
                    Manifest.permission.RECORD_AUDIO
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                // Request permission
                ActivityCompat.requestPermissions(
                    this,
                    arrayOf(Manifest.permission.RECORD_AUDIO),
                    recordAudioPermissionRequestCode
                )
            } else {
                // Permission already granted, start speech recognition
                startSpeechRecognition()
            }
        }
    }

    private fun handleShortcutClick(shortcutNumber: Int) {
        // Handle shortcut selection
        Toast.makeText(this, "Shortcut $shortcutNumber selected", Toast.LENGTH_SHORT).show()
        // Implement shortcut-specific logic here
        // You might want to pre-fill the search view with the shortcut's destination
        // searchView.setQuery("Shortcut Destination $shortcutNumber", true)
    }

    private fun startSpeechRecognition() {
        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
            putExtra(
                RecognizerIntent.EXTRA_LANGUAGE_MODEL,
                RecognizerIntent.LANGUAGE_MODEL_FREE_FORM
            )
            putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())
            putExtra(RecognizerIntent.EXTRA_PROMPT, "Speak now")
        }

        try {
            speechRecognitionLauncher.launch(intent)
        } catch (e: Exception) {
            Toast.makeText(
                this,
                "Speech recognition not supported on this device",
                Toast.LENGTH_SHORT
            ).show()
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        when (requestCode) {
            recordAudioPermissionRequestCode -> {
                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    startSpeechRecognition()
                } else {
                    Toast.makeText(this, "Audio recording permission denied.", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    private fun setupBottomNavListeners() {
        findViewById<LinearLayout>(R.id.homeButton).setOnClickListener {
            // Handle Home button click
            val intent = Intent(this, MainActivity::class.java)
            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP
            startActivity(intent)
        }

        findViewById<LinearLayout>(R.id.settingsButton).setOnClickListener {
            // Handle Settings button click
            Toast.makeText(this, "Settings clicked", Toast.LENGTH_SHORT).show()
            // Implement navigation to SettingsActivity or other action
        }

        findViewById<LinearLayout>(R.id.profileButton).setOnClickListener {
            // Handle Profile button click
            Toast.makeText(this, "Profile clicked", Toast.LENGTH_SHORT).show()
            // Implement navigation to ProfileActivity or other action
        }
    }

    // You can keep this interface method if you plan to implement a standard BottomNavigationView later,
    // but it won't be called with your current custom layout.
    override fun onNavigationItemSelected(item: MenuItem): Boolean {
        // This method is for standard BottomNavigationView, not your custom layout
        return false // Return false as it's not handled here
    }

    // Correct helper function to get the venue name using Navigine SDK method
    private fun getVenueName(venue: Venue): String {
        return venue.getName() ?: "Unnamed Venue" // Use getName() and provide a default if null
    }
}